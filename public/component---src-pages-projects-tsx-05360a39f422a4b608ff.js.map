{"version":3,"sources":["webpack:///./src/components/lib/ProjectCard.tsx","webpack:///./src/hooks/useAsync.ts","webpack:///./src/hooks/useGithubRepos.ts","webpack:///./src/hooks/util.ts","webpack:///./src/components/Projects.tsx","webpack:///./src/pages/projects.tsx"],"names":["CardType","useAsync","asyncFunction","immediate","useState","status","setStatus","value","setValue","error","setError","execute","useCallback","then","response","catch","useEffect","defaults","sort","order","getGithubRepos","filter","x","params","fetch","URLSearchParams","toString","res","json","items","Array","map","project","name","description","language","url","html_url","stars","stargazers_count","subscribers_count","watches","forks","forks_count","err","Error","throws","projects","cardType","Regular","maxChar","ProjectCard","id","cname","className","style","height","href","fillStyle","icon","text","ProjectCards","props","useGithubRepos","per_page","repo","console","i","processDescription","key","length","str","substr","lastIndexOf","Projects","marginTop","marginBottom","target","rel","App","Layout"],"mappings":"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","file":"component---src-pages-projects-tsx-05360a39f422a4b608ff.js","sourcesContent":["import React, { FC, useEffect } from \"react\"\r\nimport { LabeledButton } from \"./Button\"\r\nimport { Project, useGithubRepos } from \"../../hooks\"\r\nimport \"./_project-card.scss\"\r\nimport { IconLabel } from \"./Label\"\r\n\r\nenum CardType {\r\n    Regular = \"regular-card\"\r\n};        \r\nconst cardType = {\r\n    [CardType.Regular] :{maxChar:50}\r\n}\r\n\r\nexport interface ProjectCardProps extends Project {\r\n    id?: string;\r\n    cname?: string\r\n}\r\n\r\nexport interface ProjectCardsProps {\r\n    projects?: ProjectCardProps[];\r\n}\r\nexport const ProjectCard: FC<ProjectCardProps> = ({\r\n    id,\r\n    cname,\r\n    name,\r\n    description,\r\n    url,\r\n    stars,\r\n    watches,\r\n    forks\r\n}) => (\r\n    <div id={id} className=\"col-12 col-sm-6 col-xl-3 pb-4 project-card\">\r\n        <div className=\"card\" style={{ height: \"100%\" }}>\r\n            <div className=\"card-header\">\r\n                <h4 className=\"card-title\"><a href={url}>{name}</a></h4>\r\n                <span className=\"project-stats text-muted\">\r\n                    <IconLabel fillStyle=\"regular\" icon=\"eye\" text={watches.toString()} />\r\n                    <IconLabel fillStyle=\"regular\" icon=\"star\" text={stars.toString()} />\r\n                    <IconLabel fillStyle=\"solid\" icon=\"code-branch\" text={forks.toString()} />\r\n                </span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div>\r\n                    {/* <h6 className=\"card-subtitle mb-2 text-muted\">{author}</h6> */}\r\n                    <p className=\"card-text\">{description}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"card-footer\">\r\n                <div className=\"\">\r\n                    <LabeledButton url={url} fillStyle=\"brand\" icon=\"github\" text=\"See Project\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport const ProjectCards: FC = () => {\r\n    const { execute, status, error, value: projects } = useGithubRepos({\r\n        per_page: 20,\r\n        filter: repo => !!repo.description\r\n    });\r\n\r\n    useEffect(() => {\r\n        execute()\r\n    }, []); // !!! DO NOT INCLUDE EXECUTE IN THE DEPENDENCY ARRAY !!!\r\n    switch (status) {\r\n        // TODO handle error cases with an error boundary\r\n        // TODO add a skeleton component to display while loading\r\n        // NOTE: Fallthrough is intentional\r\n        case \"error\":\r\n            console.error(error)\r\n        case \"idle\":\r\n        case \"loading\":\r\n            return <></>;\r\n        case \"success\":\r\n            return <>\r\n                {projects?.map((props, i) => {\r\n                    props.description = processDescription(props.description);\r\n                    return <ProjectCard key={props.name} cname={\"card \"+props.cardType} id={`project-card-${i}`} {...props} />\r\n                })}\r\n            </>\r\n    }\r\n}\r\n\r\nconst processDescription = (description:string)=>{\r\n    if(description.length>cardType[CardType.Regular].maxChar){\r\n        const str = description.substr(0,cardType[CardType.Regular].maxChar);\r\n        return str.substr(0,str.lastIndexOf(\" \"))+\"...\";\r\n    }\r\n    return description\r\n}","import { useCallback, useEffect, useState } from \"react\"\r\n\r\nexport type Status = \"idle\" | \"loading\" | \"success\" | \"error\";\r\n\r\n// TODO find a better name for this\r\nexport interface AsyncHookPayload<T, E = string> {\r\n\r\n    /**\r\n     * Executes the async function. You will need to call this if the `immediate`\r\n     * parameter was set to `false`\r\n     */\r\n    execute: () => Promise<void>;\r\n\r\n    /**\r\n     * The status of the executing async function. This can take one of four values:\r\n     * \r\n     * - `idle`    - `execute()` has not been invoked yet\r\n     * - `loading` - `execute()` has been invoked, and the async function is executing/has not resolved.\r\n     * - `success` -  Execution as completed successfully, and `value` has been set to the result\r\n     * - `error`   -  Execution has completed unsuccessfully, and `error` has been set to whatever error was thrown.\r\n     */\r\n    status: Status;\r\n\r\n    /**\r\n     * The value the async function resolved to. If execution has not finished\r\n     * or was not successful, `value` is null.\r\n     */\r\n    value: T | null;\r\n\r\n    /**\r\n     * The error object, if any, the async function threw/rejected. If it did\r\n     * not reject, then `error` is null.\r\n     */\r\n    error: E | null;\r\n}\r\n\r\n/**\r\n * \r\n * @param asyncFunction The async function to call.\r\n * @param immediate Whether `asyncFunction` should be called immediately. If `false`,\r\n * you will need to invoke `execute()` manually. Defaults to true.\r\n * \r\n * @returns An `AsyncHookPayload` containing state data, etc. Refer to it for\r\n * more details.\r\n * \r\n * @see AsyncHookPayload\r\n */\r\nexport const useAsync = <T, E = string>(\r\n    asyncFunction: () => Promise<T>,\r\n    immediate = true\r\n): AsyncHookPayload<T, E> => {\r\n    const [ status, setStatus ] = useState<Status>(\"idle\")\r\n    const [ value, setValue ] = useState<T | null>(null)\r\n    const [ error, setError ] = useState<E | null>(null)\r\n\r\n    // The execute function wraps asyncFunction and\r\n    // handles setting state for pending, value, and error.\r\n    // useCallback ensures the below useEffect is not called\r\n    // on every render, but only if asyncFunction changes.\r\n    const execute = useCallback(() => {\r\n        setStatus(\"loading\")\r\n        setValue(null)\r\n        setError(null)\r\n\r\n        return asyncFunction()\r\n            .then(response => {\r\n                setValue(response)\r\n                setStatus(\"success\")\r\n            })\r\n            .catch(error => {\r\n                setError(error)\r\n                setStatus(\"error\")\r\n            })\r\n    }, [ asyncFunction ])\r\n\r\n    // Call execute if we want to fire it right away.\r\n    // Otherwise execute can be called later, such as\r\n    // in an onClick handler.\r\n    useEffect(() => {\r\n        if (immediate) {\r\n            execute()\r\n        }\r\n    }, [ execute, immediate ])\r\n\r\n    return { execute, status, value, error }\r\n}\r\n","import { AsyncHookPayload, useAsync } from \"./useAsync\"\r\nimport { throws } from \"./util\"\r\n\r\n// curl \"https://api.github.com/search/repositories?q=stars:>0+user:opensourceryclub&sort=stars&order=desc\"\r\nexport type SortBy = \"updated\" | \"forks\" | \"help-wanted-issues\" | \"stars\";\r\n\r\n/**\r\n * Establish Card type, character size\r\n * \r\n * Rules implementation.\r\n */\r\nexport type GithubReposProps = {\r\n    sort?: SortBy;\r\n    order?: \"asc\" | \"desc\";\r\n    limit?: number;\r\n    /**\r\n     * Max number of results per page (max 100)\r\n     */\r\n    per_page?: number;\r\n\r\n    /**\r\n     * Search page number to get\r\n     */\r\n    page?: number;\r\n\r\n    /**\r\n     * Specifies the types of repositories you want returned. Can be one of all,\r\n     * public, private, forks, sources, member, internal.\r\n     * @default \"all\"\r\n     */\r\n    type?: string;\r\n    filter?: (repo: Project) => boolean;\r\n}\r\nexport interface Project {\r\n    name: string;\r\n    description: string;\r\n    language: string | null;\r\n    url: string;\r\n    stars: number;\r\n    watches: number;\r\n    forks: number;\r\n    cardType:CardType;\r\n}\r\n\r\n/**\r\n * Gets a bunch of repos from the Open Sourcery organization's GitHub org.\r\n *\r\n * @param props Query settings, etc. to send to Github\r\n * \r\n * @see GithubReposProps for what each property in the object argument does\r\n */\r\nexport const useGithubRepos = (props: GithubReposProps = {}): AsyncHookPayload<Project[], Error> =>\r\n    useAsync<Project[], Error>(getGithubRepos(props), false)\r\n\r\nconst defaults: Partial<GithubReposProps> = {\r\n    sort:  \"stars\",\r\n    order: \"desc\"\r\n}\r\n/**\r\n *\r\n * @param props\r\n *\r\n * @see {@link https://docs.github.com/en/rest/reference/search#search-repositories GitHub REST API Docs - Search Repos}\r\n */\r\nconst getGithubRepos = ({\r\n    filter = x => true,\r\n    ...params\r\n}: GithubReposProps) => () =>\r\n    // Limit is intentionally not included as a query parameter\r\n    fetch(\r\n        \"https://api.github.com/search/repositories?\" +\r\n        \"q=stars:>0+user:opensourceryclub&\" + // All repos belonging to OpSrc with more than 0 stars\r\n        new URLSearchParams({ ...defaults, ...params } as Record<string, string>).toString()\r\n    )\r\n\r\n        // Parse the response body\r\n        .then(res => res.json())\r\n        .then(({ items }) => items)\r\n\r\n        // Extract relevant project data from each project\r\n        .then(res => res instanceof Array\r\n            ? res.map(project => {\r\n                // Stars/watches is messed up B/C github made bad API updates\r\n                // https://github.community/t/api-is-very-confusing-by-listing-stars-count-for-watchers-count-on-all-repos/13817\r\n                const {\r\n                    name,\r\n                    description,\r\n                    language,\r\n                    html_url: url,\r\n                    stargazers_count: stars,\r\n                    // TODO Sometimes this isn't appearing. Don't know if its a\r\n                    // bug on our end, or if there just aren't any watches\r\n                    subscribers_count: watches = 0,\r\n                    forks_count: forks\r\n                } = project;\r\n                return { name, description, language, url, stars, watches, forks } as Project;\r\n\r\n            })\r\n            : throws(`Expected GitHub response to be an array of repos, got  a ${typeof res}`)\r\n        )\r\n        .then(projects => projects.filter(filter))\r\n        // Sort projects by clout, get the top {limit} most baller repos\r\n        // .then(projects => projects\r\n        //     .sort((a, b) => (a.stars + a.watches) - (b.stars + b.watches))\r\n        //     .slice(0, limit)\r\n        // )\r\n","export const throws = <T extends Error | string | undefined>(err: T): never => {\r\n    if (err instanceof Error) {\r\n        throw err\r\n    } else {\r\n        throw new Error(err as string | undefined)\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { ProjectCards } from './lib/ProjectCard';\r\nimport \"../assets/stylesheets/projects.scss\";\r\n\r\nexport const Projects = () => {\r\n    return (\r\n        <main>        \r\n                <section id=\"projects\" className=\"page-section\" >\r\n                <div style={{ marginTop: '57px', marginBottom: 0 }}></div>\r\n                <div className=\"jumbotron jumbotron-fluid bg-dark text-center\">\r\n                    <h1 className=\"title display-4\">Projects</h1>\r\n                    <div className=\"row color-dark\">\r\n                        <ProjectCards />\r\n                    </div>\r\n                    <a className=\"btn btn-lg btn-primary color-dark my-3\" target=\"_blank\" rel=\"noopener noreferrer\"><span className=\"fab\" /> Load More</a>\r\n                </div>\r\n            </section>\r\n        </main>\r\n    );\r\n}","import React from 'react';\r\nimport Layout from '../layout/Layout';\r\nimport { Projects } from '../components/Projects';\r\n\r\nconst App = () => (\r\n    <Layout>\r\n        <Projects />\r\n    </Layout>\r\n);\r\n\r\nexport default App;\r\n\r\n"],"sourceRoot":""}